{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "$ref": "#/definitions/TransparencyLogEntry",
    "definitions": {
        "TransparencyLogEntry": {
            "properties": {
                "logIndex": {
                    "type": "string",
                    "description": "The index of the log entry"
                },
                "logId": {
                    "$ref": "#/definitions/dev.sigstore.common.v1.LogId",
                    "additionalProperties": false,
                    "description": "The unique identifier of the log."
                },
                "kindVersion": {
                    "$ref": "#/definitions/dev.sigstore.rekor.v2.KindVersion",
                    "additionalProperties": false,
                    "description": "The kind (type) and version of the object associated with this entry. These values are required to construct the entry during verification."
                },
                "inclusionProof": {
                    "$ref": "#/definitions/dev.sigstore.rekor.v2.InclusionProof",
                    "additionalProperties": false,
                    "description": "The inclusion proof can be used for offline or online verification that the entry was appended to the log, and that the log has not been altered."
                },
                "canonicalizedBody": {
                    "type": "string",
                    "description": "Optional. The canonicalized transparency log entry, used to reconstruct the Signed Entry Timestamp (SET) during verification. The contents of this field are the same as the `body` field in a Rekor response, meaning that it does **not** include the \"full\" canonicalized form (of log index, ID, etc.) which are exposed as separate fields. The verifier is responsible for combining the `canonicalized_body`, `log_index`, `log_id`, and `integrated_time` into the payload that the SET's signature is generated over. This field is intended to be used in cases where the SET cannot be produced determinisitically (e.g. inconsistent JSON field ordering, differing whitespace, etc). If set, clients MUST verify that the signature referenced in the `canonicalized_body` matches the signature provided in the `Bundle.content`. If not set, clients are responsible for constructing an equivalent payload from other sources to verify the signature.",
                    "format": "binary",
                    "binaryEncoding": "base64"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Transparency Log Entry",
            "description": "TransparencyLogEntry should directly capture the response from Rekor's V2 API when creating a new entry in the log."
        },
        "dev.sigstore.common.v1.LogId": {
            "properties": {
                "keyId": {
                    "type": "string",
                    "description": "The unique identity of the log, represented by its public key.",
                    "format": "binary",
                    "binaryEncoding": "base64"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Log Id",
            "description": "LogId captures the identity of a transparency log."
        },
        "dev.sigstore.rekor.v2.Checkpoint": {
            "properties": {
                "envelope": {
                    "type": "string"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Checkpoint",
            "description": "The checkpoint MUST contain an origin string as a unique log identifier, the tree size, and the root hash. It MAY also be followed by optional data, and clients MUST NOT assume optional data. The checkpoint MUST also contain a signature over the root hash (tree head). The checkpoint MAY contain additional signatures, but the first SHOULD be the signature from the log. Checkpoint contents are concatenated with newlines into a single string. The checkpoint format is described in https://github.com/transparency-dev/formats/blob/main/log/README.md and https://github.com/C2SP/C2SP/blob/main/tlog-checkpoint.md. An example implementation can be found in https://github.com/sigstore/rekor/blob/main/pkg/util/signed_note.go"
        },
        "dev.sigstore.rekor.v2.InclusionProof": {
            "properties": {
                "logIndex": {
                    "type": "string",
                    "description": "The index of the entry in the tree it was written to."
                },
                "rootHash": {
                    "type": "string",
                    "description": "The hash digest stored at the root of the merkle tree at the time the proof was generated.",
                    "format": "binary",
                    "binaryEncoding": "base64"
                },
                "treeSize": {
                    "type": "string",
                    "description": "The size of the merkle tree at the time the proof was generated."
                },
                "hashes": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "A list of hashes required to compute the inclusion proof, sorted in order from leaf to root. Note that leaf and root hashes are not included. The root hash is available separately in this message, and the leaf hash should be calculated by the client.",
                    "format": "binary",
                    "binaryEncoding": "base64"
                },
                "checkpoint": {
                    "$ref": "#/definitions/dev.sigstore.rekor.v2.Checkpoint",
                    "additionalProperties": false,
                    "description": "Signature of the tree head, as of the time of this proof was generated. See above info on 'Checkpoint' for more details."
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Inclusion Proof",
            "description": "InclusionProof is the proof returned from the transparency log. Can be used for offline or online verification against the log."
        },
        "dev.sigstore.rekor.v2.KindVersion": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "Kind is the type of entry being stored in the log. See here for a list: https://github.com/sigstore/rekor/tree/main/pkg/types"
                },
                "version": {
                    "type": "string",
                    "description": "The specific api version of the type."
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Kind Version",
            "description": "KindVersion contains the entry's kind and api version."
        }
    }
}